{
  "name": "Coolcompiler",
  "tagline": "Yet another COOL Compiler Project.",
  "body": "# CoolCompiler\r\nYet another COOL Compiler Project. \r\n\r\nCo-Developed by Oscar Li, Kelukin Lau, Sunny Xiao.\r\n## Know Before you start\r\nCompiler project usually are divided into 4 assignments: \r\n\r\n1.  Lexical analysis\r\n2.  Parsing\r\n3.  Semanic Analysis\r\n4.  Code Generation\r\n\r\nIn order to use tools need for COOL. A Linux Environment is highly suggested. \r\nDue to the complexity of getting all the needed tools installed correctly, we provide a pre-configured Linux \r\nsystem via VirtualBox VM.\r\n\r\nOnce the VM is set up, you can compile the example programs. Once the assignments become available, you will be able to work on these inside the VM as well.\r\n\r\nTo play around with the example cool programs, make a directory and copy over one or more examples from the /usr/class/cs143/examples directory. \r\n\r\nThese examples are the same as the ones posted on the website. The coolc command will run the reference compiler to generate the assembly output (.s) file, which you can run using the spim simulator. For example, to compile and run \"hello_world.cl\", run in a terminal (where $ represents the prompt):\r\n\r\n    $ mkdir examples\r\n    $ cd examples\r\n    $ cp /usr/class/cs143/examples/hello_world.cl .\r\n    $ coolc hello_world.cl\r\n    $ spim hello_world.s\r\n    SPIM Version 6.5 of January 4, 2003\r\n    Copyright 1990-2003 by James R. Larus (larus@cs.wisc.edu).\r\n    All Rights Reserved.\r\n    See the file README for a full copyright notice.\r\n    Loaded: /usr/class/cs143/cool/lib/trap.handler\r\n    Hello, World.\r\n    COOL program successfully executed\r\n    Stats -- #instructions : 152\r\n             #reads : 27  #writes 22  #branches 28  #other 75\r\n\r\n## Tools\r\n\r\n* FLex/JLex\r\n* Yacc\r\n\r\n## About Cool Language \r\nCool the Classroom Object Oriented Language, is a small programming language for teaching the basics of compiler construction to undergraduate computer science majors.  \r\n\r\nCool is designed to be implemented by individuals or teams of two using C++ [Str91] in a Unix environment in a single semester. At Berkeley, 80% - 90% of the student teams complete the pro ject each semester . The project has been designed to be relatively easy to modify so shorter or longer pro jects are possible. \r\n\r\nIn this paper, Cool refers both to the language and to the complete compiler project(of which the language is one part).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}